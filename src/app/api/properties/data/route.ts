import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export async function GET(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userId = session.user.id;

    // Get all properties for the user
    const properties = await prisma.property.findMany({
      where: {
        upload: {
          userId: userId
        }
      },
      include: {
        upload: {
          select: {
            createdAt: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // Transform database properties to API format
    const propertyData = properties.map((property: any) => ({
      id: property.id,
      propertyId: property.propertyId,
      name: property.name,
      type: property.type,
      location: property.location,
      purchasePrice: property.purchasePrice,
      currentValue: property.currentValue,
      purchaseDate: property.purchaseDate?.toISOString().split('T')[0],
      isAutoGenerated: property.name.includes('Property ') && property.location === 'Location TBD'
    }));

    return NextResponse.json(propertyData, { status: 200 });
  } catch (error: any) {
    console.error('Properties data error:', error);
    return NextResponse.json({ error: error.message || 'Failed to fetch properties data' }, { status: 500 });
  }
}