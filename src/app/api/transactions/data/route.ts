import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export const dynamic = 'force-dynamic';

export async function GET(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userId = session.user.id;

    // Get all properties for the user to generate transaction data
    const properties = await prisma.property.findMany({
      where: {
        upload: {
          userId: userId
        }
      },
      include: {
        upload: {
          select: {
            createdAt: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // Get actual transactions from database
    const transactions = await prisma.transaction.findMany({
      where: {
        upload: {
          userId: userId
        }
      },
      include: {
        upload: {
          select: {
            createdAt: true
          }
        }
      },
      orderBy: {
        transactionDate: 'desc'
      }
    });

    // Transform database transactions to API format
    const transactionData = transactions.map(txn => {
      const property = properties.find(p => p.propertyId === txn.propertyId);
      const propertyName = property?.name || `Property ${txn.propertyId}`;
      // Check if property was auto-generated by looking at the name pattern
      const isAutoGenerated = property?.name?.includes('Property ') && property?.location === 'Location TBD';
      
      // Calculate total fees from all fee types
      const totalFees = (txn.legalFees || 0) + (txn.brokerageFees || 0) + (txn.otherFees || 0);
      
      return {
        id: txn.id,
        transactionId: txn.transactionId,
        type: txn.transactionType,
        propertyName: propertyName,
        propertyId: txn.propertyId,
        amount: txn.amount,
        date: txn.transactionDate.toISOString().split('T')[0],
        status: txn.status,
        counterparty: txn.counterparty,
        fees: totalFees,
        legalFees: txn.legalFees || 0,
        brokerageFees: txn.brokerageFees || 0,
        otherFees: txn.otherFees || 0,
        netAmount: txn.netAmount || txn.amount,
        isAutoGenerated: isAutoGenerated,
        propertyLocation: property?.location || 'Location TBD'
      };
    });

    return NextResponse.json(transactionData, { status: 200 });
  } catch (error: any) {
    console.error('Transaction data error:', error);
    return NextResponse.json({ error: error.message || 'Failed to fetch transaction data' }, { status: 500 });
  }
}
